function pred_labels=predict_labels(train_inputs,train_labels,test_inputs)

total_data=[train_inputs;test_inputs];
topics=total_data(:,22:2021);
train_points=size(train_inputs,1);
test_points=size(test_inputs,1);
all_points=size(total_data,1);

[COEFF,SCORE1,latent]=pca(topics);
accu=cumsum(latent)./sum(latent);
col=0;

for i=1:size(accu,1)
    col=col+1
    if accu(i) > 0.99
        break
    end
end

reduced_trainingdata=[train_inputs(:,1:21),SCORE1(1:train_points,1:col)];
reduced_testingdata=[test_inputs(:,1:21),SCORE1(train_points+1:all_points,1:col)];

%choose K=10 for now
clusterNumber=10;
[Idx,C,distortionWithin,D]=kmeans(reduced_trainingdata,clusterNumber,'start','uniform'); 



%calculate labels for each cluster
labeldimension=size(train_labels,2);
MeanLabels=zeros(clusterNumber,labeldimension);
for K=1:clusterNumber
    index=find(Idx==K);
    num=size(index,1);    
    LabelsInEachCluster=zeros(num,labeldimension);
    for i=1:num
        LabelsInEachCluster(i,:)=train_labels(index(i),:);
    end
    MeanLabels(K,:)=mean(LabelsInEachCluster);   
end


%assign mean labels to points in each cluster
N=size(train_inputs,1);
predict_labels=zeros(N,labeldimension);
for i=1:N
    ClusterID=Idx(i);
    predict_labels(i,:)=MeanLabels(ClusterID,:);
end


%cluster test inputs
%assuming test inputs is reduced to the same dimension as train inputs
%So test_input and train_input should do dimention reduction together
%to ensure they have the same dimension???

pred_testlabels=zeros(test_points,labeldimension);
for i=1:test_points
    distance=zeros(clusterNumber,1);
    for j=1:clusterNumber
        distance(j,1)=norm(reduced_testingdata(i,:)-C(j,:));
    end
    minDistance=min(distance);
    clusterid=find(distance==minDistance);
    pred_testlabels(i,:)=MeanLabels(clusterid(1),:);
end
        
pred_labels=pred_testlabels;


end
